"use client"
import { AppContext } from "@/context/AppContext";
import { Inter } from "next/font/google";
import { useEffect, useState } from "react";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

const metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
};

export default function RootLayout({ children }) {
	const initState = {
		user: null,
		carts: {
			products: [],
			total: 0,
			discountedTotal: 0,
			totalProducts: 0,
			totalQuantity: 0
		},
	}
	const [appData, setAppData] = useState(initState);
	console.log(appData);

	useEffect(() => {
		const storedState = localStorage.getItem('appData');
		console.log("sto",storedState);
		if (storedState) {
			setAppData(JSON.parse(storedState));
		}
	}, [])

	useEffect(() => {
		localStorage.setItem('appData', JSON.stringify(appData));
	}, [appData])

	const handleCart = (product, type) => {
		const index = appData.carts.products.findIndex(item => item.id == product.id);

		if (type == 'add') {
			if (index == -1) {
				setAppData(prev => ({
					...prev,
					carts: {
						...prev.carts,
						products: [...prev.carts.products, { ...product, quantity: 1, total: product.price }],
						totalProducts: prev.carts.totalProducts + 1,
						totalQuantity: prev.carts.totalQuantity + 1,
						total: prev.carts.total + product.price
					}
				}))
			}
			else {
				const newProducts = [...appData.carts.products];
				newProducts[index].quantity += 1;
				newProducts[index].total += product.price;

				setAppData(prev => ({
					...prev,
					carts: {
						...prev.carts,
						products: newProducts,
						totalQuantity: prev.carts.totalQuantity + 1,
						total: prev.carts.total + product.price
					}
				}))
			}
		} else {
			if (index != -1) {
				const newProducts = [...appData.carts.products];
				const qty = newProducts[index].quantity;

				if (qty > 1) {
					newProducts[index].quantity -= 1;
					newProducts[index].total -= product.price;

					setAppData(prev => ({
						...prev,
						carts: {
							...prev.carts,
							products: newProducts,
							totalQuantity: prev.carts.totalQuantity - 1,
							total: prev.carts.total - product.price,
						}
					}))
				}
			}
		}
	}

	const removeFromCart = (product) => {
		const index = appData.carts.products.findIndex(item => item.id == product.id);
		const newProducts = [...appData.carts.products];
		newProducts.splice(index, 1);

		setAppData(prev => ({
			...prev,
			carts: {
				...prev.carts,
				products: newProducts,
				totalQuantity: appData.carts.totalQuantity - product.quantity,
				totalProducts: prev.carts.totalProducts - 1,
				total: prev.carts.total - prev.carts.products[index].total
			}
		}))
	}

	const clearCart = () => {
		setAppData(prev => ({
			...prev,
			carts: initState.carts
		}))
	}

	return (
		<html lang="en">
			<body className={inter.className}>
				<main className="min-h-screen bg-slate-200">
					<AppContext.Provider value={{ appData, setAppData, handleCart, removeFromCart, clearCart }}>
						{children}
					</AppContext.Provider>
				</main>
			</body>
		</html>
	);
}
